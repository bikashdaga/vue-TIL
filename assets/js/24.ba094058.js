(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{422:function(s,t,a){s.exports=a.p+"assets/img/q1.049a3a35.jpg"},423:function(s,t,a){s.exports=a.p+"assets/img/q2.4b4d1855.jpg"},591:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"백트래킹"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#백트래킹"}},[s._v("#")]),s._v(" 백트래킹")]),s._v(" "),n("p",[s._v("알고리즘에 있어서 DP, 그리디 등으로도 안풀리는 문제는 백트래킹 알고리즘으로 접근하게 된다.")]),s._v(" "),n("p",[s._v("예시로 미로 문제를 들 수 있는데 가령 미로 내에서 이동을 남쪽과 동쪽으로만 이동 가능하다고 할 때 목적지까지 가능 경로를 찾는 상황을 생각해보자.")]),s._v(" "),n("p",[s._v("네비게이터가 없는 상황이기 때문에 무작정 길을 가야 하는 상황이기에 더 이상 진행하지 못하는 막다른 길에 도달했을 때 "),n("strong",[s._v("다시 상황이 진행될 수 있을 때까지 이전에 지나쳤던 길로 돌아오는 방식이")]),s._v(" 백트래킹 알고리즘 풀이 방법이다.")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pseudo code")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("find_way")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 현재 (x,y)칸에 서있다")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (n-1, n-1)이 목적지")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" M"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" safe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 빈 칸")]),s._v("\n        try_down "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" find_way"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 동쪽으로 이동")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" try_down "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 도착!")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n        try_ease "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" find_way"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 남쪽으로 이동")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" try_ease\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("strong",[s._v("백트래킹 문제는 고려할 수 있는 모든 경우의 수를 알고리즘에 고려하면 된다.")])]),s._v(" "),n("h2",{attrs:{id:"n-queens-문제"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#n-queens-문제"}},[s._v("#")]),s._v(" N-queens 문제")]),s._v(" "),n("p",[s._v("퀸(Nqueen) 문제는 격자 판에 "),n("strong",[s._v("같은 대각선이 아니면서, 같은 행과 열에도 속하지 않도록 퀸을 배열하는 문제이다.")])]),s._v(" "),n("p",[s._v("4 X 4 격자판에서는 다음과 같은 경우가 존재한다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(422),alt:"queen"}}),s._v(" "),n("img",{attrs:{src:a(423),alt:"queen"}})]),s._v(" "),n("p",[s._v("X 리스트를 선언하고 리스트의 인덱스값이 격자 행의 위치를 나타낸다고 하면 첫 번째 그림은 "),n("code",[s._v("X = [1,3,0,2]")]),s._v("이고 두 번째 그림은 "),n("code",[s._v("X = [2,0,3,1]")]),s._v(" 이다.")]),s._v(" "),n("p",[s._v("구한 X의 해를 가지고 해를 어떻게 구했는 지에 대한 과정을 정리해보면")]),s._v(" "),n("ol",[n("li",[s._v("퀸을 0,0에 배치한다.")]),s._v(" "),n("li",[s._v("다음 퀸을 1,1에 배치해본다. - 같은 대각선에 존재하므로 불가능 -> 1,2에 둔다")]),s._v(" "),n("li",[s._v("다음 퀸을 2,1에 배치해본다 - 2,1부터 2,3까지는 1,2의 대각선 안에 존재하므로 2,0밖에 불가능한데 0번째 열은 첫 번째 과정에서 이미 사용되었다.")]),s._v(" "),n("li",[s._v("따라서 첫 퀸은 0,0에 두어서는 안된다.")]),s._v(" "),n("li",[s._v("위의 과정을 0,0부터 0,3까지 반복한다.")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nqueens")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("N"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("N"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" queen can place at "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c\n            nqueens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"상태트리"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#상태트리"}},[s._v("#")]),s._v(" 상태트리")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Backtrack")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        output solution\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" each possible candidate value c "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# x[1] ~ x[k-1]까지는 결정된 값")]),s._v("\n            x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c\n            Backtrack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("위 코드에서 B함수를 "),n("strong",[s._v("한계 함수(Bounding function)")]),s._v(" 라고 한다. N-queens 문제에서의 한계 함수는 같은 행-열-대각선에 다른 퀸이 놓여있지 않은지 검사하는 함수이다.")]),s._v(" "),n("p",[s._v("백트래킹 알고리즘의 성능을 결정하는 요인은 "),n("strong",[s._v("한계함수 B의 효율성에 달려있다.")])]),s._v(" "),n("p",[s._v("상태 트리(State Space Tree)는 백트래킹 알고리즘 구현 시 나타나는 몇 가지의 상태, 가령 미로 탈출 문제에서 동쪽과 남쪽으로 이동할 수 있다는 두 가지의 상태와 같은 것들이 트리 형태로 이루어지는 것을 말하며 이를 "),n("strong",[s._v("Preorder")]),s._v(" 순서로 탐색하게 된다.")]),s._v(" "),n("h2",{attrs:{id:"배낭-문제"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#배낭-문제"}},[s._v("#")]),s._v(" 배낭 문제")]),s._v(" "),n("p",[s._v("사이즈가 정해진 빈 배낭이 있고 각각 가중치가 부여되어 있고 사이즈가 모두 다른 n개의 아이템이 있을 때 "),n("strong",[s._v("빈 배낭의 사이즈가 넘지 않으면서 선택된 아이템의 가중치가 가장 높은 경우의 수")])]),s._v(" "),n("p",[s._v("각 아이템을 쪼개서 넣을 수 있는 경우를 "),n("strong",[s._v("fractional knapsack")]),s._v(" 이라고 하고, 한번에 넣을 수 있거나 없거나 하는 경우를 "),n("strong",[s._v("0/1 knapsack")]),s._v(" 이라고 한다.")]),s._v(" "),n("p",[s._v("fractional 배낭 문제의 그리디 기준은 "),n("strong",[s._v("가성비에 따라 아이템을 집어넣으면 된다.")]),s._v(" (가성비 = 아이템 가치 / 아이템 크기)이고")]),s._v(" "),n("p",[s._v("0/1 배낭 문제의 경우는 가성비라는 그리디 기준이 항상 옳지는 않다. 따라서 백트래킹 알고리즘을 채택하게 되는데 아이템의 개수가 n개라면 검사해야할 전체 경우의 수가 2ⁿ이 되어 수행시간이 길어진다. 따라서 "),n("strong",[s._v("굳이 고려하지 않아도 될 한계점을 설정해주는 것이 매우 중요하다.")])])])}),[],!1,null,null,null);t.default=e.exports}}]);